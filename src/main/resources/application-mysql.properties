# 配置ds0 和ds1两个数据源
spring.shardingsphere.datasource.names = ds1,ds2

#ds0 配置
spring.shardingsphere.datasource.ds1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url = jdbc:mysql://localhost:3306/sharding_1?characterEncoding=utf-8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username = root
spring.shardingsphere.datasource.ds1.password = YpBsYkn3YBPNmSja98WN!

#ds1 配置
spring.shardingsphere.datasource.ds2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url = jdbc:mysql://localhost:3306/sharding_2?characterEncoding=utf-8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds2.username = root
spring.shardingsphere.datasource.ds2.password = YpBsYkn3YBPNmSja98WN!

# 分库策略 根据id取模确定数据进哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = uid
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = ds$->{uid % 2+1}

# 具体分表策略
spring.shardingsphere.sharding.tables.user.actual-data-nodes = ds$->{1..2}.user_$->{1..2}
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column = uid
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression = user_$->{uid % 2+1}
spring.shardingsphere.sharding.tables.user.key-generator.column = uid
spring.shardingsphere.sharding.tables.user.key-generator.type = SNOWFLAKE

spring.shardingsphere.props.sql.show = true
